pragma solidity >=0.4.24;
// Define a contract 'Supplychain'
// Import the Access Control Contracts for inheritance...
import "../comicaccesscontrol/CreatorRole.sol";
import "../comicaccesscontrol/PublisherRole.sol";
import "../comicaccesscontrol/DistributorRole.sol";
import "../comicaccesscontrol/RetailerRole.sol";
import "../comicaccesscontrol/ConsumerRole.sol";
import "../comiccore/Ownable.sol";


contract SupplyChain is CreatorRole, PublisherRole, DistributorRole, RetailerRole, ConsumerRole, Ownable {

  // Define 'owner'
  //address payable owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;

  // Define enum 'State' with the following values:
  enum State
  {
    Created,          // 0, by Creator
    RightsForSale,    // 1, by Creator
    RightsSold,       // 2, by Publisher
    Printed,          // 3, by Publisher
    ForSale,          // 4, by Publisher
    Ordered,          // 5, by Retailer
    Processed,        // 6, by Publisher
    Packaged,         // 7, By Distributor
    Shipped,          // 8, by Distributor
    Received,         // 9, by Retailer
    Stocked,          // 10, by Retailer
    Purchased         // 11, by Consumer
    }

  State constant defaultState = State.Created;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Creator, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 10 stages
    address payable CreatorID; // Metamask-Ethereum address of the Creator
    string  CreatorName; // Creator Name
    uint    productID;  // Product ID potentially a combination of upc + sku
    uint    rightsPrice; // Rights Price
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    uint    retailPrice; //Retail Price
    State   itemState;  // Product State as represented in the enum above
    address payable distributorID;  // Metamask-Ethereum address of the Distributor
    address payable publisherID; //Metamask-Ethereum address of the Publisher
    address payable retailerID; // Metamask-Ethereum address of the Retailer
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 10 events with the same 10 state values and accept 'upc' as input argument
  event Created(uint upc);
  event RightsForSale(uint upc);
  event RightsSold(uint upc);
  event Printed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Processed(uint upc);
  event Packaged(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Stocked(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  //modifier onlyOwner() {
  //  require(msg.sender == owner);
  //  _;
  //}

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address);
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValueConsumer(uint _upc) {
    _;
    uint _price = items[_upc].retailPrice;
    uint amountToReturn = msg.value - _price;
    msg.sender.transfer(amountToReturn);
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValueRetailer(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    msg.sender.transfer(amountToReturn);
  }

  modifier checkValuePublisher(uint _upc) {
    _;
    uint _price = items[_upc].rightsPrice;
    uint amountToReturn = msg.value - _price;
    msg.sender.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Created
  modifier created(uint _upc) {
    require(items[_upc].itemState == State.Created);
    _;
  }

  modifier rightsForSale(uint _upc) {
    require(items[_upc].itemState == State.RightsForSale);
    _;
  }

  modifier rightsSold(uint _upc) {
    require(items[_upc].itemState == State.RightsSold);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Printed
  modifier printed(uint _upc) {
    require(items[_upc].itemState == State.Printed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Ordered
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Ordered);
    _;
  }

  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packaged(uint _upc) {
    require(items[_upc].itemState == State.Packaged);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  modifier stocked(uint _upc) {
    require(items[_upc].itemState == State.Stocked);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    //owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner()) {
      address payable owner = address(uint160(owner()));
      selfdestruct(owner);
    }
  }

  // Define a function 'createItem' that allows a creator to mark an item 'Created'
  function createItem(uint _upc, address payable _CreatorID, string memory _CreatorName, string memory _productNotes) public onlyCreator
  {
    // Add the new item as part of Create
    items[_upc].sku = sku;
    items[_upc].upc = _upc;
    items[_upc].productID = sku + _upc;
    items[_upc].ownerID = _CreatorID;
    items[_upc].CreatorID = _CreatorID;
    items[_upc].CreatorName = _CreatorName;
    items[_upc].productNotes = _productNotes;
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Created(_upc);
  }

  function sellItemRights(uint _upc, uint _rightsPrice) public onlyCreator()
  // Call modifier to check if upc has passed previous supply chain stage
  created(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].ownerID)
  {
    // Update the appropriate fields
    items[_upc].rightsPrice = _rightsPrice;
    items[_upc].itemState = State.RightsForSale;
    // Emit the appropriate event
    emit RightsForSale(_upc);
  }

  function buyItemRights(uint _upc) public payable onlyPublisher()
  // Call modifier to check if upc has passed previous supply chain stage
  rightsForSale(_upc)
  // Call modifer to check if buyer has paid enough
  paidEnough(items[_upc].rightsPrice)
  // Call modifer to send any excess ether back to buyer
  checkValuePublisher(_upc)
  {
    // Update the appropriate fields
    items[_upc].ownerID = msg.sender;
    items[_upc].publisherID = msg.sender;
    items[_upc].itemState = State.RightsSold;
    // Transfer money to creator
    items[_upc].CreatorID.transfer(items[_upc].rightsPrice);
    // Emit the appropriate event
    emit RightsSold(_upc);
  }

  // Define a function 'printItem' that allows a publisher to mark an item 'Printed'
  function printItem(uint _upc) public onlyPublisher()
  // Call modifier to check if upc has passed previous supply chain stage
  rightsSold(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].ownerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Printed;
    // Emit the appropriate event
    emit Printed(_upc);
  }

  // Define a function 'sellItem' that allows a pubklisher to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public onlyPublisher()
  // Call modifier to check if upc has passed previous supply chain stage
  printed(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].ownerID)
  {
    // Update the appropriate fields
    items[_upc].productPrice = _price;
    items[_upc].itemState = State.ForSale;
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'orderItem' that allows the retailer to mark an item 'Ordered'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable onlyRetailer()
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValueRetailer(_upc)
    {

    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.Ordered;
    // Transfer money to publisher
    items[_upc].publisherID.transfer(items[_upc].productPrice);
    // emit the appropriate event
    emit Sold(_upc);
  }

  // Define a function 'processItem' that allows a publisher to mark an item 'Processed'
  function processItem(uint _upc) public onlyPublisher()
  // Call modifier to check if upc has passed previous supply chain stage
  sold(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].ownerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Processed;
    // Emit the appropriate event
    emit Processed(_upc);
  }

  // Define a function 'packageItem' that allows a distributor to mark an item 'Packaged'
  function packageItem(uint _upc) public onlyDistributor()
  // Call modifier to check if upc has passed previous supply chain stage
  processed(_upc)
  // Call modifier to verify caller of this function

  {
    // Update the appropriate fields
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.Packaged;
    // Emit the appropriate event
    emit Packaged(_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is packaged
  function shipItem(uint _upc) public onlyDistributor()
    // Call modifier to check if upc has passed previous supply chain stage
    packaged(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].distributorID)
    {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public onlyRetailer()
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    verifyCaller(items[_upc].retailerID)
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].ownerID = items[_upc].retailerID;
    items[_upc].itemState = State.Received;
    // Emit the appropriate event
    emit Received(_upc);
  }

  function stockItem(uint _upc, uint _retailPrice) public onlyRetailer()
    // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    verifyCaller(items[_upc].ownerID)
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].retailPrice = _retailPrice;
    items[_upc].itemState = State.Stocked;
    // Emit the appropriate event
    emit Stocked(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public payable onlyConsumer()
    // Call modifier to check if upc has passed previous supply chain stage
    stocked(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].retailPrice)
    // Call modifer to send any excess ether back to buyer
    checkValueConsumer(_upc)
    // Call modifier to verify caller of this function
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[_upc].consumerID = msg.sender;
    items[_upc].ownerID = msg.sender;
    items[_upc].itemState = State.Purchased;

    items[_upc].retailerID.transfer(items[_upc].retailPrice);
    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address CreatorID,
  string  memory CreatorName
  )
  {
  // Assign values to the 5 parameters
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  ownerID = items[_upc].ownerID;
  CreatorID = items[_upc].CreatorID;
  CreatorName = items[_upc].CreatorName;


  return
  (
  itemSKU,
  itemUPC,
  ownerID,
  CreatorID,
  CreatorName
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  memory productNotes,
  uint    rightsPrice,
  uint    productPrice,
  uint    retailPrice,
  uint    itemState,
  address publisherID,
  address distributorID,
  address retailerID,
  address consumerID
  )
  {
    // Assign values to the 12 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    rightsPrice = items[_upc].rightsPrice;
    productPrice = items[_upc].productPrice;
    retailPrice = items[_upc].retailPrice;
    itemState = uint(items[_upc].itemState);
    publisherID = items[_upc].publisherID;
    distributorID = items[_upc].distributorID;
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;

  return
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  rightsPrice,
  productPrice,
  retailPrice,
  itemState,
  publisherID,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
